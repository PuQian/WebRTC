(function(a, b) {
    if (typeof define === "function" && define.amd) {
        define([], b)
    } else if (typeof exports === "object") {
        module.exports = b()
    } else {
        a.store = b(a)
    }
})(this,
function(a, b) {
    if (!window.localStorage) return;
    var c = window.localStorage,
    d, e, f = function() {};
    function g(a) {
        return typeof a === "object" && Object.prototype.toString.call(a).toLowerCase() && !a.length
    }
    function h(a) {/**/
        return a === b || typeof a === "function" ? a + "": JSON.stringify(a)
    }
    function i(a) {
        if (typeof a !== "string") {
            return b
        }
        try {
            return JSON.parse(a)
        } catch(c) {
            return a || b
        }
    }
    function j(a) {
        return {}.toString.call(a) === "[object Function]"
    }
    function k(a) {
        return typeof a === "string"
    }
    function l(a) {
        return a instanceof Array
    }
    e = {
        set: function(a, d) {
            if (d === b) {
                return this.remove(a)
            }
            c.setItem(a, h(d));
            f("set", a, d);
            return this
        },
        setAll: function(a) {
            var b, c;
            for (var d in a) {
                c = a[d];
                if (this.set(d, c) !== c) b = true
            }
            return this
        },
        get: function(a) {
            return i(c.getItem(a))
        },
        getAll: function() {
            var a = {};
            this.forEach(function(b, c) {
                a[b] = c
            });
            return a
        },
        clear: function() {
            this.forEach(function(a, b) {
                f("clear", a, b)
            });
            c.clear();
            return this
        },
        remove: function(a) {
            var b = this.get(a);
            c.removeItem(a);
            f("remove", a, b);
            return b
        },
        has: function(a) {
            return c.hasOwnProperty(a)
        },
        keys: function() {
            var a = [];
            this.forEach(function(b, c) {
                a.push(b)
            });
            return a
        },
        size: function() {
            return this.keys().length
        },
        forEach: function(a) {
            for (var b = 0; b < c.length; b++) {
                var d = c.key(b);
                if (a(d, this.get(d)) === false) break
            }
            return this
        },
        onStorage: function(a) {
            if (a && j(a)) f = a;
            return this
        }
    };
    d = function(a, c) {
        var e = arguments,
        f = null,
        h = function(a, c) {
            if (j(c)) {
                if (k(a)) {
                    f = c(d.get(a));
                    return f ? d.set(a, f) : b
                }
                if (l(a)) for (var h in a) {
                    f = c(d.get(a[h]));
                    if (f) d.set(a[h], f)
                }
                return
            }
            if (g(a)) return d.setAll(a);
            if (e.length === 0) {
                return d.getAll()
            }
            if (c === false) {
                return d.remove(a)
            }
            if (c !== b) {
                return d.set(a, c)
            }
            if (a) {
                return d.get(a)
            }
            return d.setAll(a, c)
        };
        return h(a, c)
    };
    for (var m in e) d[m] = e[m];
    return d
});